// Under CC0
// HmTextToHtml v.0.0

jsmode "WebView2\\" + currentmacrofilename;

js {

function escapeHtml(text) {
    const escapeMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#039;'
    };

    // エスケープ対象の文字をキーとして持つ正規表現を自動生成
    const escapeChars = Object.keys(escapeMap).join('');
    const escapeRegex = new RegExp(`[${escapeChars}]`, 'g');

    let count = 0;

    const escapedText = text.replace(escapeRegex, (match) => {
        count++;
        return escapeMap[match];
    });

    return {
        escapedText,
        count
    };
}

// エラーメッセージ用
function writeOutputPane(msg) {
    let dll = loaddll("HmOutputPane.dll");
    dll.dllFunc.Output(hidemaru.getCurrentWindowHandle(), msg + "\r\n");
}

function main() {
    if (selecting()) {
        const targetText = getselectedtext();
        if (targetText) {
            let escapedHtmlObj = escapeHtml(targetText);

            insert(escapedHtmlObj.escapedText);
            writeOutputPane(escapedHtmlObj.count + "個を置き替えました。");
        }
    } else {
        const targetText = gettotaltext();
        if (targetText) {
            let {escapedText, count} = escapeHtml(targetText);

            settotaltext(escapedHtmlObj.escapedText);
            writeOutputPane(escapedHtmlObj.count + "個を置き替えました。");
        }
    }
}

// 同期で処理する必要はない。非同期で十分
hidemaru.setTimeout(main, 0);

}